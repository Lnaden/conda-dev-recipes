jobs:
- job: windows
  pool:
    vmImage: vs2017-win2016
#  timeoutInMinutes: 360
  variables:
    NVIDIA_CUDA_DIR: $(Pipeline.Workspace)/.nvcuda
    NVIDIA_DRIVER_DIR: $(Pipeline.Workspace)/.nvdriver
    CUDA_9.0_URL: https://developer.nvidia.com/compute/cuda/9.0/Prod/network_installers/cuda_9.0.176_win10_network-exe
    CUDA_9.1_URL: https://developer.nvidia.com/compute/cuda/9.1/Prod/network_installers/cuda_9.1.85_win10_network
    CUDA_9.2_URL: https://developer.nvidia.com/compute/cuda/9.2/Prod2/network_installers2/cuda_9.2.148_win10_network
    CUDA_10.0_URL: https://developer.nvidia.com/compute/cuda/10.0/Prod/network_installers/cuda_10.0.130_win10_network
    CUDA_10.1_URL: http://developer.download.nvidia.com/compute/cuda/10.1/Prod/network_installers/cuda_10.1.243_win10_network.exe
    CUDA_10.2_URL: http://developer.download.nvidia.com/compute/cuda/10.2/Prod/network_installers/cuda_10.2.89_win10_network.exe
  strategy:
    maxParallel: 8
    matrix:
      windows_python2.7:
        CONFIG: linux_python2.7
        EXCLUDE_JINJA: CUDA_SHORT_VERSION
      windows_python2.7_cuda8.0:
        CONFIG: linux_python2.7_cuda8.0
        INCLUDE_JINJA: CUDA_SHORT_VERSION
        CUDA_VER: 8.0
        CUDA_URL: https://developer.nvidia.com/compute/cuda/8.0/Prod2/network_installers/cuda_8.0.61_win10_network-exe

  steps:
    - script: |
        echo "##vso[task.setvariable variable=NIGHTLY]true"
      condition: eq(variables['Build.Reason'], 'Schedule')
      displayName: Set dev trigger if scheduled

    - script: |
        ECHO ON
#        conda create -c conda-forge --yes -n cb python=3 conda-build
      displayName: "Echo UP!"

    # Several mixed messages here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/conda-environment?view=azure-devops
    # This is supposedly depreciated, but this is still required for Microsoft-hosted agents to use the conda env
    - task: CondaEnvironment@1
      inputs:
        packageSpecs: 'python=3 conda-build conda'
        installOptions: "-c conda-forge"
        updateConda: false
      displayName: Install conda-build and activate environment

    # The condition here for the NVIDIA steps only should trigger if CUDA_VER is set
    - task: Cache@2
      inputs:
        key: 'CUDA'
        path: $(NVIDIA_CUDA_DIR)/$(CUDA_VER)
        cacheHitVar: CUDA_RESTORED
      displayName: Cache the NVIDIA CUDA installer
      condition: ne(variables['CUDA_VER'], '')  # Technically Null, but is cast as "To string: '' (the empty string)"

#    - task: Cache@2
#      inputs:
#        key: 'NVDIRVE'
#        path: $(NVIDIA_DRIVER_DIR)
#      displayName: Cache the NVIDIA Driver installer
#      cacheHitVar: NVDRIVER_RESTORED

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          New-Item -ItemType Directory -Force -Path $(NVIDIA_CUDA_DIR)/$(CUDA_VER)
          Invoke-WebRequest $(CUDA_URL) -OutFile $(NVIDIA_CUDA_DIR)/$(CUDA_VER)/CUDA_installer.exe
      displayName: Download CUDA Driver
      condition: and(ne(variables['CUDA_VER'], ''), ne(variables.CUDA_RESTORED, 'true'))

    - script: |
        $(NVIDIA_CUDA_DIR)/$(CUDA_VER)/CUDA_installer.exe -s
      displayName: Install the CUDA Files
      condition: ne(variables['CUDA_VER'], '') # Technically Null, but is cast as "To string: '' (the empty string)"

    - powershell: |
        Set-Variable -Name CBAFLAGS -Value "-vvv --cycle-packages --dry-run"
        If ($INCLUDE_JINJA) {
          Set-Variable -Name CBAFLAGS -Value "$($CBAFLAGS) --build-only-jinja $(INCLUDE_JINJA)"
        }
        If ($EXCLUDE_JINJA) {
          Set-Variable -Name CBAFLAGS -Value "$($CBAFLAGS) --no-build-jinja $(EXCLUDE_JINJA)"
        }
        If ($NIGHTLY) {
          Set-Variable -Name CBAFLAGS -Value "$($CBAFLAGS) --dev --scheduled-only"
        }
        Write-Host "###vso[task.setvariable variable=CBA_FLAGS]$CBAFLAGS"
      displayName: Assemble Variables

    - script: |
        conda config --add channels omnia
        conda config --add channels conda-forge

        conda update --yes conda conda-build anaconda-client

        chmod +x $(Build.SourcesDirectory)/conda-build-all

        $(Build.SourcesDirectory)/conda-build-all $CBA_FLAGS -m $(Build.SourcesDirectory)/$(CONFIG).yaml -- $(Build.SourcesDirectory)/*
      displayName: Run Conda Builds
