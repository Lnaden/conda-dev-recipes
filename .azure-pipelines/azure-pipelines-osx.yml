jobs:
- job: osx
  pool:
    vmImage: macOS-10.13
#  timeoutInMinutes: 360
  strategy:
    maxParallel: 8
    matrix:
      osx_python2.7:
        CONFIG: linux_python2.7
        EXCLUDE_JINJA: CUDA_SHORT_VERSION
#      osx_python2.7_cuda:
#        CONFIG: linux_python2.7_cuda8.0
#        INCLUDE_JINJA: CUDA_SHORT_VERSION
#        # CUDA_URL: http://developer.download.nvidia.com/compute/cuda/10.2/Prod/network_installers/cuda_10.2.89_mac_network.dmg
#        CUDA_URL: http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_mac.dmg
#        CUDA_DRIVER_URL: http://us.download.nvidia.com/Mac/cuda_418/cudadriver_418.163_macos.dmg
#        CUDA_VER: 10.2

  steps:
    - script: |
        echo "##vso[task.setvariable variable=NIGHTLY]true"
      condition: eq(variables['Build.Reason'], 'Schedule')
      displayName: Set dev trigger if scheduled

    - bash: |
        echo "##vso[task.prependpath]$CONDA/bin"
        sudo chown -R $USER $CONDA
      displayName: Add conda to PATH

    - script: |
        source activate base
        conda install -n base -c conda-forge --quiet --yes conda-build
        conda update --yes --quiet -c conda-forge -c defaults --all
      displayName: Add and update conda-forge

    # The condition here for the NVIDIA steps only should trigger if CUDA_URL is set
    - task: Cache@2
      inputs:
        key: 'CUDA | "$(CUDA_VER)" | CUDA'
        path: /Developers/NVIDIA/$(CUDA_VER)
        cacheHitVar: CUDA_RESTORED
      displayName: Cache the NVIDIA CUDA installation
      condition: ne(variables['CUDA_URL'], '')  # Technically Null, but is cast as "To string: '' (the empty string)"

    # So... NVIDIA's instructions *say* there is a Driver with the 10.2 and 10.1 toolkit, there is not. Good times
    - task: Cache@2
      inputs:
        key: 'CUDA | "$(CUDA_VER)" | Driver'
        path: /Library/Frameworks/CUDA.framework
        cacheHitVar: CUDA_DRIVER_RESTORED
      displayName: Cache the NVIDIA Driver installation
      condition: ne(variables['CUDA_URL'], '')  # Technically Null, but is cast as "To string: '' (the empty string)"

    - task: Cache@2
      inputs:
        key: 'CUDA | "$(CUDA_VER)" | Stub'
        path: //usr/local/cuda
        cacheHitVar: CUDA_STUB_RESTORED
      displayName: Cache the NVIDIA Driver Stub for Unix
      condition: ne(variables['CUDA_URL'], '')  # Technically Null, but is cast as "To string: '' (the empty string)"

    - script: |
        # Instructions from NVIDIA
        export PATH=/Developer/NVIDIA/CUDA-10.2/bin${PATH:+:${PATH}}
        export DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-10.2/lib\
                                 ${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}
      condition: ne(variables['CUDA_URL'], '')
      displayName: Set the CUDA PATHs for OSX

    - script: |
        echo "Downloading CUDA Toolkit"
        CUDA_INSTALL_NAME="CUDA_installer.dmg"
        CUDA_MOUNT_LOCATION="/Volumes/CUDAMacOSXInstaller"
        CUDA_INSTALLER_LOCATION="$CUDA_MOUNT_LOCATION/CUDAMacOSXInstaller.app/Contents/MacOS/CUDAMacOSXInstaller"
        curl -v -L $(CUDA_URL) --output $CUDA_INSTALL_NAME
        # Mount the DMG
        hdiutil attach $CUDA_INSTALL_NAME
        # Run the installer
        $CUDA_INSTALLER_LOCATION --accept-eula --silent --install-package=cuda-toolkit
        # Detach
        hdiutil detach $CUDA_MOUNT_LOCATION
      displayName: Download and Install the CUDA Toolkit
      condition: and(ne(variables['CUDA_URL'], ''), ne(variables.CUDA_RESTORED, 'true'))

    - script: |
        CUDA_DRIVER_NAME="CUDA_Driver_installer.dmg"
        CUDA_DRIVER_MOUNT_LOCATION="/Volumes/CUDADriver"
        CUDA_DRIVER_INSTALLER_LOCATION="$CUDA_DRIVER_MOUNT_LOCATION/CUDADriver.pkg"
        curl -L $(CUDA_DRIVER_URL) --output $CUDA_DRIVER_NAME
        # Mount the DMG
        hdiutil attach $CUDA_DRIVER_NAME
        # Run the installer
        installer -store -pkg "$CUDA_DRIVER_INSTALLER_LOCATION" -target / -verbose
        # Detach
        hdiutil detach $CUDA_DRIVER_MOUNT_LOCATION
      displayName: Download and Install the CUDA Driver
      condition: and(ne(variables['CUDA_URL'], ''), ne(variables.CUDA_DRIVER_RESTORED, 'true'), ne(variables.CUDA_STUB_RESTORED, 'true'))

    - script: |
        export PROVIDER_DIR="$(basename $THISDIR)"
        CBA_FLAGS="-vvv --cycle-packages --dry-run"
        if [ -n "$INCLUDE_JINJA" ]; then
          CBA_FLAGS="$CBA_FLAGS --build-only-jinja $INCLUDE_JINJA"
        fi
        if [ -n "$EXCLUDE_JINJA" ]; then
          CBA_FLAGS="$CBA_FLAGS --no-build-jinja $EXCLUDE_JINJA"
        fi
        if [ ! -z "$NIGHTLY"]; then
          CBA_FLAGS="$CBA_FLAGS --dev --scheduled-only --upload omnia-dev"
        fi
        export CBA_FLAGS=$CBA_FLAGS
        echo "##vso[task.setvariable variable=CBA_FLAGS]$CBA_FLAGS"
      displayName: Assemble Variables

    - script: |
        source activate base
        conda config --add channels omnia
        conda config --add channels conda-forge

        conda install --yes conda conda-build anaconda-client

        chmod +x $(Build.SourcesDirectory)/conda-build-all

        echo $CBA_FLAGS
        echo $PATH
        echo $DYLD_LIBRARY_PATH

        python $(Build.SourcesDirectory)/conda-build-all $CBA_FLAGS -m $(Build.SourcesDirectory)/.conda_configs/$(CONFIG).yaml -- $(Build.SourcesDirectory)/*
      displayName: Run Conda Build
